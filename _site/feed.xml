<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-09-08T02:11:19+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">小叶不是叶</title><subtitle>小叶不是叶的小树</subtitle><author><name>shengye</name><email>shengyexiuyo2413@gmail.com</email></author><entry><title type="html">飞机大战</title><link href="http://localhost:4000/essays/2023/09/04/gec6818-AircraftWar/" rel="alternate" type="text/html" title="飞机大战" /><published>2023-09-04T10:00:00+00:00</published><updated>2023-09-04T10:00:00+00:00</updated><id>http://localhost:4000/essays/2023/09/04/gec6818-AircraftWar</id><content type="html" xml:base="http://localhost:4000/essays/2023/09/04/gec6818-AircraftWar/">&lt;h2 id=&quot;游戏简介&quot;&gt;游戏简介&lt;/h2&gt;

&lt;p&gt;​   本游戏是一个基于GEC6818开发板开发的飞机射击类的小游戏,玩家可以通过触摸屏控制我方飞机移动,发射炮弹击落敌方飞机。游戏有启动界面、游戏运行界面和游戏结束界面。项目链接：https://github.com/shengye2413/gec6818-AircraftWar&lt;/p&gt;

&lt;h2 id=&quot;游戏逻辑&quot;&gt;游戏逻辑&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ftok()、shmget()&lt;/code&gt;函数创建一个共享内存并使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shmat()&lt;/code&gt;函数将共享内存映射到父子进程的地址空间，使进程间可以进行通信。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;进入主界面循环。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在循环中根据鼠标点击的位置进行不同的操作：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;如果点击了退出按钮，则清除界面并退出程序。&lt;/li&gt;
      &lt;li&gt;如果点击了排行榜按钮，则显示排行榜，并在返回按钮被点击后返回主界面。&lt;/li&gt;
      &lt;li&gt;如果点击了开始游戏按钮，则进入游戏循环。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在游戏循环中：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;创建两个进程，分别表示敌方和我方。&lt;/li&gt;
      &lt;li&gt;在敌方进程中循环生成敌机，并使用多线程来控制敌机的移动。&lt;/li&gt;
      &lt;li&gt;在我方进程中：
        &lt;ul&gt;
          &lt;li&gt;显示我方飞机的初始位置。&lt;/li&gt;
          &lt;li&gt;根据鼠标移动的实时位置更新共享内存中的数据。&lt;/li&gt;
          &lt;li&gt;根据鼠标点击的位置执行不同的操作：
            &lt;ul&gt;
              &lt;li&gt;如果点击了游戏区域，则更新我方飞机的位置并开启一个新的线程来控制子弹的轨迹。&lt;/li&gt;
              &lt;li&gt;如果点击了返回按钮，则终止敌方进程，并返回主界面。&lt;/li&gt;
              &lt;li&gt;如果点击了暂停按钮，则显示暂停界面，并暂停敌方进程。在屏幕再次被点击后唤醒敌方进程，并清除暂停界面。&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;监测敌方进程是否终止，如果终止则显示游戏结束界面，并在返回主界面或重新开始按钮被点击后执行相应操作。&lt;/li&gt;
          &lt;li&gt;游戏终止后记录击毁敌机数量，写入到文件“1.TXT”中。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;关闭文件和释放资源。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;核心文件及功能&quot;&gt;核心文件及功能&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;background.c: 负责绘制不同界面背景和图片。&lt;/li&gt;
  &lt;li&gt;enemy.c: 负责生成敌机,移动,被击落逻辑。使用多线程实现敌机的并发生成。&lt;/li&gt;
  &lt;li&gt;main.c: 游戏主函数,负责创建界面,生成游戏进程。&lt;/li&gt;
  &lt;li&gt;own_side.c: 负责我方飞机移动和子弹发射逻辑。&lt;/li&gt;
  &lt;li&gt;slide.c/h: 封装了触摸屏输入,提供计算点击位置和实时获取触摸坐标的接口。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;代码实现要点&quot;&gt;代码实现要点&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;使用framebuffer设备提供的内存映射接口更新屏幕显示。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用多线程实现敌我双方行为的并发执行。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用信号机制控制游戏进程的暂停、继续。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用共享内存使敌我双方可以共享数据(如我方位置)。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;封装触摸屏输入,避免在不同文件重复编写事件读取代码。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;主要函数&quot;&gt;主要函数&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;lcd_init()&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;初始化LCD屏幕,无参数。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;作用:打开framebuffer设备,获取屏幕信息,进行内存映射,为后续绘图做准备。&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;draw_pixel(int x, int y, int color)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在指定坐标画点,参数说明:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;x: 横坐标&lt;/li&gt;
  &lt;li&gt;y: 纵坐标&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;color: 画点的颜色值&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;作用:根据传入的坐标,在framebuffer绘图内存上画指定颜色的点。&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;direction()&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;判断触摸动作是否为点击,无参数。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;作用:通过读取触摸屏事件,判断用户触摸动作是否为点击,并返回点击判断结果。&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;enemy_air(void *args)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;控制敌机移动,参数说明:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;args: 线程参数,这里未使用。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;作用:在随机位置生成敌机,控制敌机移动,重画敌机位置实现动画效果。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;ball_track(void *args)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;绘制我方炮弹的飞行轨迹,参数说明:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;args: 线程参数,这里未使用。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;作用:根据我方飞机位置绘制炮弹轨迹动画。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;our_air()&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;重画我方飞机位置,无参数。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;作用:根据最新我方飞机坐标重画飞机位置,实现我方飞机的移动。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;好的,继续解释其余一些主要函数:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;draw_background(int color)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;绘制全屏背景,参数说明:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;color: 背景颜色值&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;作用: 用指定颜色值绘制全屏背景。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;draw_picture(int posx, int posy, const char* pic_path)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;绘制图片,参数说明:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;posx: 图片左上角横坐标&lt;/li&gt;
  &lt;li&gt;posy: 图片左上角纵坐标&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;pic_path: 图片路径&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;作用: 在指定位置绘制图片文件。&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Main_Interface()&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;绘制主界面,无参数。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;作用: 绘制主界面背景和图片。&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Interface()&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;绘制游戏界面,无参数。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;作用: 绘制游戏运行时的界面背景。&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;leaderboard()&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;绘制排行榜界面,无参数。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;作用: 绘制排行榜界面,待实现排行榜内容。&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;gameover()&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;绘制游戏结束界面,无参数。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;作用:绘制游戏结束画面。&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;real_time_location()&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;实时获取触摸坐标,无参数。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;作用:循环读取触摸屏事件,并实时更新触摸坐标值。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;一些变量及宏定义&quot;&gt;一些变量及宏定义&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;shm_px: 共享内存起始地址指针,保存我方飞机x坐标&lt;/li&gt;
  &lt;li&gt;shm_py: 共享内存起始地址指针,保存我方飞机y坐标&lt;/li&gt;
  &lt;li&gt;shm_p_num: 共享内存起始地址指针,保存摧毁敌机数量&lt;/li&gt;
  &lt;li&gt;lcd_fd: framebuffer 设备文件描述符&lt;/li&gt;
  &lt;li&gt;IPC_PATH: 共享内存Key的路径&lt;/li&gt;
  &lt;li&gt;IPC_CODE: 共享内存Key的代码&lt;/li&gt;
&lt;/ul&gt;</content><author><name>shengye</name><email>shengyexiuyo2413@gmail.com</email></author><category term="Essays" /><category term="项目" /><summary type="html">游戏简介</summary></entry><entry><title type="html">欢迎来到小叶不是叶的小树</title><link href="http://localhost:4000/essays/2023/08/24/hello/" rel="alternate" type="text/html" title="欢迎来到小叶不是叶的小树" /><published>2023-08-24T10:00:00+00:00</published><updated>2023-08-24T10:00:00+00:00</updated><id>http://localhost:4000/essays/2023/08/24/hello</id><content type="html" xml:base="http://localhost:4000/essays/2023/08/24/hello/">&lt;h6 id=&quot;欢迎来到小叶不是叶的小树&quot;&gt;欢迎来到小叶不是叶的小树&lt;/h6&gt;</content><author><name>shengye</name><email>shengyexiuyo2413@gmail.com</email></author><category term="Essays" /><category term="项目" /><category term="学习笔记" /><summary type="html">欢迎来到小叶不是叶的小树</summary></entry><entry><title type="html">五子棋</title><link href="http://localhost:4000/essays/2023/08/24/gec6818-backgammon/" rel="alternate" type="text/html" title="五子棋" /><published>2023-08-24T10:00:00+00:00</published><updated>2023-08-24T10:00:00+00:00</updated><id>http://localhost:4000/essays/2023/08/24/gec6818-backgammon</id><content type="html" xml:base="http://localhost:4000/essays/2023/08/24/gec6818-backgammon/">&lt;h2 id=&quot;概述&quot;&gt;概述&lt;/h2&gt;

&lt;p&gt;这是一个基于Linux Framebuffer的五子棋游戏。
主要功能有:
   实现简单的开始界面
   实现五子棋游戏的基本规则
   实现胜负判断和计分
   实现排行榜功能
项目链接：https://github.com/shengye2413/gec6818-backgammon&lt;/p&gt;

&lt;h2 id=&quot;开发环境&quot;&gt;开发环境&lt;/h2&gt;

&lt;p&gt;​	&lt;strong&gt;vscode，ubuntu，gec6818&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;游戏流程&quot;&gt;游戏流程&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;初始化屏幕&lt;/p&gt;

    &lt;p&gt;使用Linux Framebuffer接口完成屏幕的初始化,主要步骤是:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;打开Framebuffer设备文件:/dev/fb0&lt;/li&gt;
      &lt;li&gt;通过ioctl系统调用获取屏幕信息:分辨率、色深等&lt;/li&gt;
      &lt;li&gt;计算需要的内存大小,调用mmap完成内存映射&lt;/li&gt;
      &lt;li&gt;获取内存首地址指针,用于后续像素访问&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;相关代码在taiji.c中的lcd_init函数。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;图形绘制&lt;/p&gt;

    &lt;p&gt;基于内存映射的指针,可以直接对内存进行读写操作,实现像素级的访问。&lt;/p&gt;

    &lt;p&gt;例如draw_pixel函数可以画单个像素。draw_background可以设置整个屏幕的背景色。&lt;/p&gt;

    &lt;p&gt;基于像素级操作,实现了各种图形的绘制,如圆形、图片等。&lt;/p&gt;

    &lt;p&gt;例如draw_round可以画圆,draw_picture可以绘制bmp图片。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;接收玩家输入位置&lt;/p&gt;

    &lt;p&gt;sheet.c中实现了简单的棋盘和棋子的逻辑。&lt;/p&gt;

    &lt;p&gt;使用二维数组sheet记录每个位置的棋子情况。&lt;/p&gt;

    &lt;p&gt;chess函数可以在指定位置画棋子。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;检查胜负&lt;/p&gt;

    &lt;p&gt;遍历整个棋盘，当寻找到对应的棋子时开始判断。&lt;/p&gt;

    &lt;p&gt;1.分别定义两个整数计数A和B的相连棋子个数，为了方便之后的调用，定义在主函数中。&lt;/p&gt;

    &lt;p&gt;2.判读棋子之后的横向棋子是否相等，相等计数等于相连棋子数，不相等计数清零。&lt;/p&gt;

    &lt;p&gt;3.当计数达到5时，判定为胜利，计数不为零则返回计数位。不为5时计数位为0&lt;/p&gt;

    &lt;p&gt;4.如果当前棋子投降，判定为另一方胜利。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;计算排行榜&lt;/p&gt;

    &lt;p&gt;记录双方获胜次数,显示在排行榜界面。&lt;/p&gt;

    &lt;p&gt;获胜次数同时保存在外置文件“1.txt”中。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;功能模块&quot;&gt;功能模块&lt;/h2&gt;

&lt;p&gt;主要分为以下几个模块:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;main.c:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;main(): 主函数,实现程序的整体流程控制&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;lcd_init(): 初始化屏幕,实现Framebuffer的设置&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;draw_pixel(): 画一个像素点&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;draw_background(): 设置全屏背景色&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;draw_round1()/draw_round2(): 画圆形的两半&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;draw_picture(): 绘制bmp图片&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;draw_taiji(): 画太极图案&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;checkerboard(): 画棋盘格子&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;leaderboard(): 显示胜负排行榜&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;slide.c:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;open_file(): 打开触摸屏输入设备文件&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;direction(): 读取触摸事件,判断滑动方向&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;sheet.c:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;chess(): 在指定位置画棋子&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;AWin()/BWin(): 判断黑白棋是否获胜&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;chess_again(): 棋盘数据清零&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;taiji.c:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;lcd_init(): 初始化屏幕&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;draw_pixel(): 画单个像素&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;draw_background(): 填充背景&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;draw_round1/2(): 画圆形&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;draw_picture(): 画图片&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;draw_taiji(): 画太极图案&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;checkerboard(): 画棋盘&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;leaderboard(): 显示排行榜&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;主要函数&quot;&gt;主要函数&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;lcd_init()&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;这个函数完成了Framebuffer的初始化,主要步骤包括:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;打开Framebuffer设备文件:/dev/fb0&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;通过ioctl系统调用,获取屏幕信息,如分辨率、色深等&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;计算需要的内存大小&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;通过mmap内存映射机制,映射Framebuffer显存&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;获取内存映射的首地址指针,用于后续的像素访问&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;这样通过内存映射,我们就可以直接读写Framebuffer显存,实现像素级的屏幕访问。&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;draw_pixel()&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;这个函数用于画单个像素点,参数包括:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;x: 水平坐标&lt;/li&gt;
      &lt;li&gt;y: 垂直坐标&lt;/li&gt;
      &lt;li&gt;color: 要设定的颜色值&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;根据坐标,直接设置对应显存位置的颜色值,就可以画出一个像素点。&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;chess()&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;这个函数实现下棋逻辑,参数包括:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;color1/color2: 棋子的两种颜色&lt;/li&gt;
      &lt;li&gt;num: 记录当前是第几步&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;函数利用循环遍历棋盘的每个位置,判断点击位置是否有效,如果有效就在该位置画一个棋子,并记录到棋盘数组中。&lt;/p&gt;

&lt;p&gt;交替调用该函数,就可以实现黑白棋子的落子。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWin()/BWin()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这两个函数用来判断黑白棋是否达成五子连线,并返回连线数。&lt;/p&gt;

&lt;p&gt;基本思路是遍历数组,找到己方棋子后,判断四个方向是否有相连的五子。&lt;/p&gt;</content><author><name>shengye</name><email>shengyexiuyo2413@gmail.com</email></author><category term="Essays" /><category term="项目" /><summary type="html">概述 这是一个基于Linux Framebuffer的五子棋游戏。 主要功能有: 实现简单的开始界面 实现五子棋游戏的基本规则 实现胜负判断和计分 实现排行榜功能 项目链接：https://github.com/shengye2413/gec6818-backgammon 开发环境 ​ vscode，ubuntu，gec6818 游戏流程 初始化屏幕 使用Linux Framebuffer接口完成屏幕的初始化,主要步骤是: 打开Framebuffer设备文件:/dev/fb0 通过ioctl系统调用获取屏幕信息:分辨率、色深等 计算需要的内存大小,调用mmap完成内存映射 获取内存首地址指针,用于后续像素访问 相关代码在taiji.c中的lcd_init函数。 图形绘制 基于内存映射的指针,可以直接对内存进行读写操作,实现像素级的访问。 例如draw_pixel函数可以画单个像素。draw_background可以设置整个屏幕的背景色。 基于像素级操作,实现了各种图形的绘制,如圆形、图片等。 例如draw_round可以画圆,draw_picture可以绘制bmp图片。 接收玩家输入位置 sheet.c中实现了简单的棋盘和棋子的逻辑。 使用二维数组sheet记录每个位置的棋子情况。 chess函数可以在指定位置画棋子。 检查胜负 遍历整个棋盘，当寻找到对应的棋子时开始判断。 1.分别定义两个整数计数A和B的相连棋子个数，为了方便之后的调用，定义在主函数中。 2.判读棋子之后的横向棋子是否相等，相等计数等于相连棋子数，不相等计数清零。 3.当计数达到5时，判定为胜利，计数不为零则返回计数位。不为5时计数位为0 4.如果当前棋子投降，判定为另一方胜利。 计算排行榜 记录双方获胜次数,显示在排行榜界面。 获胜次数同时保存在外置文件“1.txt”中。 功能模块 主要分为以下几个模块: main.c: main(): 主函数,实现程序的整体流程控制 lcd_init(): 初始化屏幕,实现Framebuffer的设置 draw_pixel(): 画一个像素点 draw_background(): 设置全屏背景色 draw_round1()/draw_round2(): 画圆形的两半 draw_picture(): 绘制bmp图片 draw_taiji(): 画太极图案 checkerboard(): 画棋盘格子 leaderboard(): 显示胜负排行榜 slide.c: open_file(): 打开触摸屏输入设备文件 direction(): 读取触摸事件,判断滑动方向 sheet.c: chess(): 在指定位置画棋子 AWin()/BWin(): 判断黑白棋是否获胜 chess_again(): 棋盘数据清零 taiji.c: lcd_init(): 初始化屏幕 draw_pixel(): 画单个像素 draw_background(): 填充背景 draw_round1/2(): 画圆形 draw_picture(): 画图片 draw_taiji(): 画太极图案 checkerboard(): 画棋盘 leaderboard(): 显示排行榜 主要函数 lcd_init() 这个函数完成了Framebuffer的初始化,主要步骤包括: 打开Framebuffer设备文件:/dev/fb0 通过ioctl系统调用,获取屏幕信息,如分辨率、色深等 计算需要的内存大小 通过mmap内存映射机制,映射Framebuffer显存 获取内存映射的首地址指针,用于后续的像素访问 这样通过内存映射,我们就可以直接读写Framebuffer显存,实现像素级的屏幕访问。 draw_pixel() 这个函数用于画单个像素点,参数包括: x: 水平坐标 y: 垂直坐标 color: 要设定的颜色值 根据坐标,直接设置对应显存位置的颜色值,就可以画出一个像素点。 chess() 这个函数实现下棋逻辑,参数包括: color1/color2: 棋子的两种颜色 num: 记录当前是第几步 函数利用循环遍历棋盘的每个位置,判断点击位置是否有效,如果有效就在该位置画一个棋子,并记录到棋盘数组中。 交替调用该函数,就可以实现黑白棋子的落子。 AWin()/BWin() 这两个函数用来判断黑白棋是否达成五子连线,并返回连线数。 基本思路是遍历数组,找到己方棋子后,判断四个方向是否有相连的五子。</summary></entry><entry><title type="html">五子棋字符版</title><link href="http://localhost:4000/essays/2023/08/20/backgammon/" rel="alternate" type="text/html" title="五子棋字符版" /><published>2023-08-20T14:00:00+00:00</published><updated>2023-08-20T14:00:00+00:00</updated><id>http://localhost:4000/essays/2023/08/20/backgammon</id><content type="html" xml:base="http://localhost:4000/essays/2023/08/20/backgammon/">&lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;

&lt;p&gt;​	本项目实现了一个简单的命令行版两人五子棋游戏。玩家在16x16的棋盘上轮流下棋,先连成五子的一方获胜。&lt;/p&gt;

&lt;h2 id=&quot;开发环境&quot;&gt;开发环境&lt;/h2&gt;

&lt;p&gt;​	&lt;strong&gt;vscode，ubuntu&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;游戏流程&quot;&gt;游戏流程&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;初始化棋盘&lt;/p&gt;

    &lt;p&gt;定义一个字符型的16x16的字符数组，数组全赋值为-方便观看，这个数组用来建立一个16x16的表格当作棋盘，棋子只能下在棋盘里，下棋下在对应的坐标里。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;接收玩家输入位置&lt;/p&gt;

    &lt;p&gt;读取输入，把输入当作坐标，坐标位置的字符变为下子者所使用的字符。定义一个整数，保存下子个数，个数为偶数的为A，为奇数的为B。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;检查胜负&lt;/p&gt;

    &lt;p&gt;遍历整个棋盘，当寻找到对应的棋子时开始判断。&lt;/p&gt;

    &lt;p&gt;1.分别定义两个整数计数A和B的相连棋子个数，为了方便之后的调用，定义在主函数中。&lt;/p&gt;

    &lt;p&gt;2.判读棋子之后的横向棋子是否相等，相等计数等于相连棋子数，不相等计数清零。&lt;/p&gt;

    &lt;p&gt;3.当计数达到5时，判定为胜利，计数不为零则返回计数位。不为5时计数位为0&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;打印棋盘&lt;/p&gt;

    &lt;p&gt;1.当程序开始时，清空屏幕，打印空棋盘。&lt;/p&gt;

    &lt;p&gt;2.输出横纵坐标方便描述。&lt;/p&gt;

    &lt;p&gt;3.判断游戏是否结束，未结束接受输入，然后清空屏幕，再次打印新的棋盘排列。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;重复2-5直至游戏结束&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;功能模块&quot;&gt;功能模块&lt;/h2&gt;

&lt;p&gt;主要分为以下几个模块:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;主程序:main.c
    &lt;ul&gt;
      &lt;li&gt;初始化棋盘&lt;/li&gt;
      &lt;li&gt;获取玩家输入&lt;/li&gt;
      &lt;li&gt;调用判断胜负的函数&lt;/li&gt;
      &lt;li&gt;打印棋盘&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;棋盘操作:sheet.c
    &lt;ul&gt;
      &lt;li&gt;创建棋盘&lt;/li&gt;
      &lt;li&gt;打印棋盘&lt;/li&gt;
      &lt;li&gt;判断玩家是否获胜&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;描述棋盘操作的头文件:sheet.h&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;数据结构&quot;&gt;数据结构&lt;/h2&gt;

&lt;p&gt;使用二维字符数组sheet[16][16]表示棋盘,空格用’-‘表示,玩家A用’O’表示,玩家B用’X’表示。&lt;/p&gt;

&lt;h2 id=&quot;主要函数&quot;&gt;主要函数&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;create_sheet:初始化棋盘为16*16的空格&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;put_sheet:输入棋子，奇偶分别代表不同棋子&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;check_win:打印当前棋盘,判断胜负&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AWin:判断A方是否获胜&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;BWin:判断B方是否获胜&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;create_sheet函数:&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;初始化棋盘,用 ‘-‘ 填充16x16的二维字符数组,表示为空棋格。&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;C:\Users\29102\AppData\Roaming\Typora\typora-user-images\image-20230814192803060.png&quot; alt=&quot;image-20230814192803060&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;调用示例:&lt;/p&gt;

    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sheet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;create_sheet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sheet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 初始化棋盘&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;put_sheet函数:&lt;/p&gt;

        &lt;p&gt;输入棋子，奇偶分别代表不同棋子&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;C:\Users\29102\AppData\Roaming\Typora\typora-user-images\image-20230814194518160.png&quot; alt=&quot;image-20230814194518160&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;调用示例:&lt;/p&gt;

        &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;put_sheet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sheet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 输入棋子&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;check_win函数:&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;打印当前棋盘状态,判断游戏是否结束,有胜负结果或者是平局。&lt;/p&gt;

    &lt;p&gt;调用示例:&lt;/p&gt;

    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;check_win&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sheet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;AWin函数:&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;检查A方是否已经获胜,即是否已经连成5子。返回连子数。&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;C:\Users\29102\AppData\Roaming\Typora\typora-user-images\image-20230814194936983.png&quot; alt=&quot;image-20230814194936983&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;调用示例:&lt;/p&gt;

    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AWin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sheet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;BWin函数:&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;检查B方是否已经获胜,类似于AWin。&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;main函数:&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;主程序,实现游戏主循环逻辑。&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;print_sheet函数:&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;用于打印当前的棋盘状态。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>shengye</name><email>shengyexiuyo2413@gmail.com</email></author><category term="Essays" /><category term="项目" /><summary type="html">概述 ​ 本项目实现了一个简单的命令行版两人五子棋游戏。玩家在16x16的棋盘上轮流下棋,先连成五子的一方获胜。 开发环境 ​ vscode，ubuntu 游戏流程 初始化棋盘 定义一个字符型的16x16的字符数组，数组全赋值为-方便观看，这个数组用来建立一个16x16的表格当作棋盘，棋子只能下在棋盘里，下棋下在对应的坐标里。 接收玩家输入位置 读取输入，把输入当作坐标，坐标位置的字符变为下子者所使用的字符。定义一个整数，保存下子个数，个数为偶数的为A，为奇数的为B。 检查胜负 遍历整个棋盘，当寻找到对应的棋子时开始判断。 1.分别定义两个整数计数A和B的相连棋子个数，为了方便之后的调用，定义在主函数中。 2.判读棋子之后的横向棋子是否相等，相等计数等于相连棋子数，不相等计数清零。 3.当计数达到5时，判定为胜利，计数不为零则返回计数位。不为5时计数位为0 打印棋盘 1.当程序开始时，清空屏幕，打印空棋盘。 2.输出横纵坐标方便描述。 3.判断游戏是否结束，未结束接受输入，然后清空屏幕，再次打印新的棋盘排列。 重复2-5直至游戏结束 功能模块 主要分为以下几个模块: 主程序:main.c 初始化棋盘 获取玩家输入 调用判断胜负的函数 打印棋盘 棋盘操作:sheet.c 创建棋盘 打印棋盘 判断玩家是否获胜 描述棋盘操作的头文件:sheet.h 数据结构 使用二维字符数组sheet[16][16]表示棋盘,空格用’-‘表示,玩家A用’O’表示,玩家B用’X’表示。 主要函数 create_sheet:初始化棋盘为16*16的空格 put_sheet:输入棋子，奇偶分别代表不同棋子 check_win:打印当前棋盘,判断胜负 AWin:判断A方是否获胜 BWin:判断B方是否获胜 create_sheet函数: 初始化棋盘,用 ‘-‘ 填充16x16的二维字符数组,表示为空棋格。 调用示例: char sheet[16][16]; create_sheet(sheet); // 初始化棋盘 put_sheet函数: 输入棋子，奇偶分别代表不同棋子 调用示例: put_sheet(sheet,a,b,number); // 输入棋子 check_win函数: 打印当前棋盘状态,判断游戏是否结束,有胜负结果或者是平局。 调用示例: check_win(A_count, B_count, number, sheet); AWin函数: 检查A方是否已经获胜,即是否已经连成5子。返回连子数。 调用示例: int A_count = AWin(sheet, A_count); BWin函数: 检查B方是否已经获胜,类似于AWin。 main函数: 主程序,实现游戏主循环逻辑。 print_sheet函数: 用于打印当前的棋盘状态。</summary></entry><entry><title type="html">New Theme, New Blog</title><link href="http://localhost:4000/essays/2020/10/01/new-theme-new-blog/" rel="alternate" type="text/html" title="New Theme, New Blog" /><published>2020-10-01T07:35:00+00:00</published><updated>2020-10-01T07:35:00+00:00</updated><id>http://localhost:4000/essays/2020/10/01/new-theme-new-blog</id><content type="html" xml:base="http://localhost:4000/essays/2020/10/01/new-theme-new-blog/">&lt;h2 id=&quot;today&quot;&gt;Today&lt;/h2&gt;

&lt;p&gt;I released the &lt;a href=&quot;https://rubygems.org/gems/not-pure-poole/versions/0.1.0&quot;&gt;0.1.0&lt;/a&gt; version of a new Jekyll theme &lt;a href=&quot;https://github.com/vszhub/not-pure-poole&quot;&gt;Not Pure Poole&lt;/a&gt; designed by me, and also, I begin to launch a new –&lt;/p&gt;

&lt;p&gt;and hopefully permanent too – personal blog.&lt;/p&gt;

&lt;p&gt;Insisting to write a blog and write it good is not easy. Every time I feel frustrated I would go to read &lt;a href=&quot;https://blog.codinghorror.com/about-me/&quot;&gt;Jeff Atwood&lt;/a&gt; and &lt;a href=&quot;https://emptysqua.re/blog/write-an-excellent-programming-blog/&quot;&gt;A. Jesse Jiryu Davis&lt;/a&gt;’ posts to gain some power.&lt;/p&gt;</content><author><name>shengye</name><email>shengyexiuyo2413@gmail.com</email></author><category term="Essays" /><category term="学习笔记" /><category term="项目" /><summary type="html">Today I released the 0.1.0 version of a new Jekyll theme Not Pure Poole designed by me, and also, I begin to launch a new – and hopefully permanent too – personal blog. Insisting to write a blog and write it good is not easy. Every time I feel frustrated I would go to read Jeff Atwood and A. Jesse Jiryu Davis’ posts to gain some power.</summary></entry></feed>